// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mymsg.proto

#ifndef PROTOBUF_mymsg_2eproto__INCLUDED
#define PROTOBUF_mymsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace mypack {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mymsg_2eproto();
void protobuf_AssignDesc_mymsg_2eproto();
void protobuf_ShutdownFile_mymsg_2eproto();

class Student;
class Student_PhoneNumber;

enum Student_PhoneType {
  Student_PhoneType_MOBILE = 0,
  Student_PhoneType_HOME = 1
};
bool Student_PhoneType_IsValid(int value);
const Student_PhoneType Student_PhoneType_PhoneType_MIN = Student_PhoneType_MOBILE;
const Student_PhoneType Student_PhoneType_PhoneType_MAX = Student_PhoneType_HOME;
const int Student_PhoneType_PhoneType_ARRAYSIZE = Student_PhoneType_PhoneType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Student_PhoneType_descriptor();
inline const ::std::string& Student_PhoneType_Name(Student_PhoneType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Student_PhoneType_descriptor(), value);
}
inline bool Student_PhoneType_Parse(
    const ::std::string& name, Student_PhoneType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Student_PhoneType>(
    Student_PhoneType_descriptor(), name, value);
}
// ===================================================================

class Student_PhoneNumber : public ::google::protobuf::Message {
 public:
  Student_PhoneNumber();
  virtual ~Student_PhoneNumber();

  Student_PhoneNumber(const Student_PhoneNumber& from);

  inline Student_PhoneNumber& operator=(const Student_PhoneNumber& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Student_PhoneNumber& default_instance();

  void Swap(Student_PhoneNumber* other);

  // implements Message ----------------------------------------------

  Student_PhoneNumber* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Student_PhoneNumber& from);
  void MergeFrom(const Student_PhoneNumber& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string number = 1;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 1;
  inline const ::std::string& number() const;
  inline void set_number(const ::std::string& value);
  inline void set_number(const char* value);
  inline void set_number(const char* value, size_t size);
  inline ::std::string* mutable_number();
  inline ::std::string* release_number();
  inline void set_allocated_number(::std::string* number);

  // optional .mypack.Student.PhoneType type = 2 [default = HOME];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::mypack::Student_PhoneType type() const;
  inline void set_type(::mypack::Student_PhoneType value);

  // @@protoc_insertion_point(class_scope:mypack.Student.PhoneNumber)
 private:
  inline void set_has_number();
  inline void clear_has_number();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* number_;
  int type_;
  friend void  protobuf_AddDesc_mymsg_2eproto();
  friend void protobuf_AssignDesc_mymsg_2eproto();
  friend void protobuf_ShutdownFile_mymsg_2eproto();

  void InitAsDefaultInstance();
  static Student_PhoneNumber* default_instance_;
};
// -------------------------------------------------------------------

class Student : public ::google::protobuf::Message {
 public:
  Student();
  virtual ~Student();

  Student(const Student& from);

  inline Student& operator=(const Student& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Student& default_instance();

  void Swap(Student* other);

  // implements Message ----------------------------------------------

  Student* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Student& from);
  void MergeFrom(const Student& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Student_PhoneNumber PhoneNumber;

  typedef Student_PhoneType PhoneType;
  static const PhoneType MOBILE = Student_PhoneType_MOBILE;
  static const PhoneType HOME = Student_PhoneType_HOME;
  static inline bool PhoneType_IsValid(int value) {
    return Student_PhoneType_IsValid(value);
  }
  static const PhoneType PhoneType_MIN =
    Student_PhoneType_PhoneType_MIN;
  static const PhoneType PhoneType_MAX =
    Student_PhoneType_PhoneType_MAX;
  static const int PhoneType_ARRAYSIZE =
    Student_PhoneType_PhoneType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PhoneType_descriptor() {
    return Student_PhoneType_descriptor();
  }
  static inline const ::std::string& PhoneType_Name(PhoneType value) {
    return Student_PhoneType_Name(value);
  }
  static inline bool PhoneType_Parse(const ::std::string& name,
      PhoneType* value) {
    return Student_PhoneType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string email = 3;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 3;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  // repeated .mypack.Student.PhoneNumber phone = 4;
  inline int phone_size() const;
  inline void clear_phone();
  static const int kPhoneFieldNumber = 4;
  inline const ::mypack::Student_PhoneNumber& phone(int index) const;
  inline ::mypack::Student_PhoneNumber* mutable_phone(int index);
  inline ::mypack::Student_PhoneNumber* add_phone();
  inline const ::google::protobuf::RepeatedPtrField< ::mypack::Student_PhoneNumber >&
      phone() const;
  inline ::google::protobuf::RepeatedPtrField< ::mypack::Student_PhoneNumber >*
      mutable_phone();

  // @@protoc_insertion_point(class_scope:mypack.Student)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_email();
  inline void clear_has_email();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  ::std::string* name_;
  ::std::string* email_;
  ::google::protobuf::RepeatedPtrField< ::mypack::Student_PhoneNumber > phone_;
  friend void  protobuf_AddDesc_mymsg_2eproto();
  friend void protobuf_AssignDesc_mymsg_2eproto();
  friend void protobuf_ShutdownFile_mymsg_2eproto();

  void InitAsDefaultInstance();
  static Student* default_instance_;
};
// ===================================================================


// ===================================================================

// Student_PhoneNumber

// required string number = 1;
inline bool Student_PhoneNumber::has_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Student_PhoneNumber::set_has_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Student_PhoneNumber::clear_has_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Student_PhoneNumber::clear_number() {
  if (number_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    number_->clear();
  }
  clear_has_number();
}
inline const ::std::string& Student_PhoneNumber::number() const {
  // @@protoc_insertion_point(field_get:mypack.Student.PhoneNumber.number)
  return *number_;
}
inline void Student_PhoneNumber::set_number(const ::std::string& value) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    number_ = new ::std::string;
  }
  number_->assign(value);
  // @@protoc_insertion_point(field_set:mypack.Student.PhoneNumber.number)
}
inline void Student_PhoneNumber::set_number(const char* value) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    number_ = new ::std::string;
  }
  number_->assign(value);
  // @@protoc_insertion_point(field_set_char:mypack.Student.PhoneNumber.number)
}
inline void Student_PhoneNumber::set_number(const char* value, size_t size) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    number_ = new ::std::string;
  }
  number_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mypack.Student.PhoneNumber.number)
}
inline ::std::string* Student_PhoneNumber::mutable_number() {
  set_has_number();
  if (number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    number_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mypack.Student.PhoneNumber.number)
  return number_;
}
inline ::std::string* Student_PhoneNumber::release_number() {
  clear_has_number();
  if (number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = number_;
    number_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Student_PhoneNumber::set_allocated_number(::std::string* number) {
  if (number_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete number_;
  }
  if (number) {
    set_has_number();
    number_ = number;
  } else {
    clear_has_number();
    number_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mypack.Student.PhoneNumber.number)
}

// optional .mypack.Student.PhoneType type = 2 [default = HOME];
inline bool Student_PhoneNumber::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Student_PhoneNumber::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Student_PhoneNumber::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Student_PhoneNumber::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::mypack::Student_PhoneType Student_PhoneNumber::type() const {
  // @@protoc_insertion_point(field_get:mypack.Student.PhoneNumber.type)
  return static_cast< ::mypack::Student_PhoneType >(type_);
}
inline void Student_PhoneNumber::set_type(::mypack::Student_PhoneType value) {
  assert(::mypack::Student_PhoneType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:mypack.Student.PhoneNumber.type)
}

// -------------------------------------------------------------------

// Student

// required uint64 id = 1;
inline bool Student::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Student::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Student::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Student::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 Student::id() const {
  // @@protoc_insertion_point(field_get:mypack.Student.id)
  return id_;
}
inline void Student::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:mypack.Student.id)
}

// required string name = 2;
inline bool Student::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Student::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Student::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Student::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Student::name() const {
  // @@protoc_insertion_point(field_get:mypack.Student.name)
  return *name_;
}
inline void Student::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:mypack.Student.name)
}
inline void Student::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:mypack.Student.name)
}
inline void Student::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mypack.Student.name)
}
inline ::std::string* Student::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mypack.Student.name)
  return name_;
}
inline ::std::string* Student::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Student::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mypack.Student.name)
}

// required string email = 3;
inline bool Student::has_email() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Student::set_has_email() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Student::clear_has_email() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Student::clear_email() {
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& Student::email() const {
  // @@protoc_insertion_point(field_get:mypack.Student.email)
  return *email_;
}
inline void Student::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(value);
  // @@protoc_insertion_point(field_set:mypack.Student.email)
}
inline void Student::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(value);
  // @@protoc_insertion_point(field_set_char:mypack.Student.email)
}
inline void Student::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mypack.Student.email)
}
inline ::std::string* Student::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mypack.Student.email)
  return email_;
}
inline ::std::string* Student::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Student::set_allocated_email(::std::string* email) {
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (email) {
    set_has_email();
    email_ = email;
  } else {
    clear_has_email();
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mypack.Student.email)
}

// repeated .mypack.Student.PhoneNumber phone = 4;
inline int Student::phone_size() const {
  return phone_.size();
}
inline void Student::clear_phone() {
  phone_.Clear();
}
inline const ::mypack::Student_PhoneNumber& Student::phone(int index) const {
  // @@protoc_insertion_point(field_get:mypack.Student.phone)
  return phone_.Get(index);
}
inline ::mypack::Student_PhoneNumber* Student::mutable_phone(int index) {
  // @@protoc_insertion_point(field_mutable:mypack.Student.phone)
  return phone_.Mutable(index);
}
inline ::mypack::Student_PhoneNumber* Student::add_phone() {
  // @@protoc_insertion_point(field_add:mypack.Student.phone)
  return phone_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mypack::Student_PhoneNumber >&
Student::phone() const {
  // @@protoc_insertion_point(field_list:mypack.Student.phone)
  return phone_;
}
inline ::google::protobuf::RepeatedPtrField< ::mypack::Student_PhoneNumber >*
Student::mutable_phone() {
  // @@protoc_insertion_point(field_mutable_list:mypack.Student.phone)
  return &phone_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mypack

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::mypack::Student_PhoneType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mypack::Student_PhoneType>() {
  return ::mypack::Student_PhoneType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mymsg_2eproto__INCLUDED
